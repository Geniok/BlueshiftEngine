in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec4 in_color : COLOR;
in vec2 in_st : TEXCOORD0;

#ifdef USE_SHADOW_MAP
$include "ShadowLibrary.vp"
#endif

out vec4 v2f_color;
out vec3 v2f_normal;
out vec3 v2f_lightVector;
out vec2 v2f_texCoord;
out vec3 v2f_viewVector;
out vec3 v2f_lightFallOff;
out vec4 v2f_lightProjection;

#ifdef INSTANCING
	struct InstanceData {
		vec4 localToWorldMatrixS;
		vec4 localToWorldMatrixT;
		vec4 localToWorldMatrixR;
        vec4 worldToLocalMatrixS;
        vec4 worldToLocalMatrixT;
        vec4 worldToLocalMatrixR;
	};

	UNIFORM_BLOCK InstanceDataBlock {
        InstanceData instanceData[512];
    };

    #define instance instanceData[gl_InstanceID]
#else
	uniform vec4 localToWorldMatrixS;
	uniform vec4 localToWorldMatrixT;
	uniform vec4 localToWorldMatrixR;
    uniform vec4 worldToLocalMatrixS;
    uniform vec4 worldToLocalMatrixT;
    uniform vec4 worldToLocalMatrixR;
	uniform vec4 textureMatrixS;
	uniform vec4 textureMatrixT;
    uniform vec3 viewOrigin;
    uniform vec4 lightVec;
	uniform LOWP vec4 vertexColorScale;
	uniform LOWP vec4 vertexColorAdd;
	uniform LOWP vec4 constantColor;
#endif

uniform mat4 viewProjectionMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform vec3 lightInvRadius;
uniform mat4 lightTextureMatrix;
uniform bool useShadowMap;

void main() {
#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
	vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
#else
	vec3 vNormal = in_normal.xyz;
#endif

	vec4 localPos;
	vec3 localNormal;

#ifdef GPU_SKINNING
	skinningMatrix(in_position, localPos, vNormal, localNormal);
#else
	localPos = in_position;
	localNormal = vNormal;
#endif

	vec4 worldPos;
	worldPos.x = dot(localToWorldMatrixS, localPos);
	worldPos.y = dot(localToWorldMatrixT, localPos);
	worldPos.z = dot(localToWorldMatrixR, localPos);
	worldPos.w = 1.0;

    vec3 worldL = lightVec.xyz - lightVec.w * worldPos.xyz;
    vec3 localL;
    localL.x = dot(worldToLocalMatrixS.xyz, worldL);
    localL.y = dot(worldToLocalMatrixT.xyz, worldL);
    localL.z = dot(worldToLocalMatrixR.xyz, worldL);

#ifdef USE_SHADOW_MAP
	#ifdef USE_SHADOW_POINT
		ShadowCubeTransform(worldL);
	#elif defined(USE_SHADOW_SPOT) || defined(USE_SHADOW_CASCADE)
		ShadowTransform(worldPos);
	#endif
#endif

    v2f_lightProjection = lightTextureMatrix * worldPos;
    v2f_lightFallOff = localL * lightInvRadius;
	v2f_lightVector = localL;

	vec3 worldV = viewOrigin.xyz - worldPos.xyz;
    vec3 localV;
    localV.x = dot(worldToLocalMatrixS.xyz, worldV);
    localV.y = dot(worldToLocalMatrixT.xyz, worldV);
    localV.z = dot(worldToLocalMatrixR.xyz, worldV);
    v2f_viewVector = localV;

	v2f_normal = localNormal;

	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

	gl_Position = modelViewProjectionMatrix * localPos;
}
