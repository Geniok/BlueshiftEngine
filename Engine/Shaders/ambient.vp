in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec4 in_color : COLOR;
in vec2 in_st : TEXCOORD0;
in vec4 in_tangent : TEXCOORD1;

out vec4 v2f_color;
out vec2 v2f_texCoord;
out vec3 v2f_viewVector;
out vec3 v2f_tangentToWorldMatrixS;
out vec3 v2f_tangentToWorldMatrixT;
out vec3 v2f_tangentToWorldMatrixR;
out vec3 v2f_normal;

uniform mat4 modelViewProjectionMatrix;

#ifdef INSTANCED_DRAW
	struct entityData_t {
		vec4 worldMatrixS;
		vec4 worldMatrixT;
		vec4 worldMatrixR;
		vec3 localViewOrigin;
		vec4 textureMatrixS;
		vec4 textureMatrixT;
		vec4 vertexColorScale;
		vec4 vertexColorAdd;
		vec4 constantColor;
	};

	uniform entityData_t entityData[256];
	#define ED entityData[gl_InstanceIDARB]
#else
	uniform vec4 worldMatrixS;
	uniform vec4 worldMatrixT;
	uniform vec4 worldMatrixR;
	uniform vec3 localViewOrigin;
	uniform vec4 textureMatrixS;
	uniform vec4 textureMatrixT;
	uniform vec4 vertexColorScale;
	uniform vec4 vertexColorAdd;
	uniform vec4 constantColor;
#endif

void main() {
	vec4 localVertex;
	vec3 localNormal;
	vec3 localTangent;
	vec3 localBiTangent;

	#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
		vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
        vec4 vTangent = in_tangent * 2.0 - 1.0;
	#else
		vec3 vNormal = in_normal.xyz;
        vec4 vTangent = in_tangent;
	#endif

#ifdef GPU_SKINNING
	skinningMatrix(in_position, localVertex, vNormal, localNormal, vTangent, localTangent, localBiTangent);
#else
	localVertex = in_position;
	localNormal = vNormal;
	localTangent = vTangent;
	localBiTangent = normalize(cross(vNormal.xyz, vTangent.xyz) * vTangent.w);
#endif

#if !defined(NO_LIT)
	#if _NORMAL_SOURCE != 0
		mat3 TBN = mat3(localTangent, localBiTangent, localNormal);

		// world normal for irradiance cubemap
		v2f_tangentToWorldMatrixS = worldMatrixS.xyz * TBN;
		v2f_tangentToWorldMatrixT = worldMatrixT.xyz * TBN;
		v2f_tangentToWorldMatrixR = worldMatrixR.xyz * TBN;
	#else
		v2f_normal.x = dot(worldMatrixS.xyz, localNormal.xyz);
		v2f_normal.y = dot(worldMatrixT.xyz, localNormal.xyz);
		v2f_normal.z = dot(worldMatrixR.xyz, localNormal.xyz);
	#endif
#endif

#if defined(_PARALLAX)
	vec3 V = localViewOrigin.xyz - localVertex.xyz;
	v2f_viewVector = V * TBN;
#endif

	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

	gl_Position = modelViewProjectionMatrix * vec4(1.0, localVertex.yzw);
}
