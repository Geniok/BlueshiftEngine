in vec4 in_position : POSITION;
in vec4 in_color : COLOR;

out vec4 v2f_color;
out vec3 v2f_texCoord;

uniform mat4 modelViewMatrix;
uniform mat4 modelViewProjectionMatrix;

#ifdef INSTANCED_DRAW
    struct entityData_t {
        vec4 worldMatrixS;
        vec4 worldMatrixT;
        vec4 worldMatrixR;
        vec3 localViewOrigin;
        mat3 localLightAxis;
        vec4 localLightOrigin;
        vec4 textureMatrixS;
        vec4 textureMatrixT;
        vec4 vertexColorScale;
        vec4 vertexColorAdd;
        vec4 constantColor;
    };

    uniform entityData_t entityData[256];
    #define ED entityData[gl_InstanceIDARB]
#else
    uniform vec4 worldMatrixS;
    uniform vec4 worldMatrixT;
    uniform vec4 worldMatrixR;
    uniform vec3 localViewOrigin;
    uniform mat3 localLightAxis;
    uniform vec4 localLightOrigin;
    uniform vec4 textureMatrixS;
    uniform vec4 textureMatrixT;
    uniform vec4 vertexColorScale;
    uniform vec4 vertexColorAdd;
    uniform vec4 constantColor;
#endif

uniform float rotation;

void main() {
    vec3 v = in_position.xyz + modelViewMatrix[3].xyz * mat3(modelViewMatrix);

    float radian = rotation * 0.01745329251; // degree to radian
    float s = sin(radian);
    float c = cos(radian);

    vec3 dir;
    dir.x = c * v.x - s * v.y;
    dir.y = s * v.x + c * v.y;
    dir.z = v.z;

    // Convert z-up axis to GL axis
    v2f_texCoord.x = dir.y;
    v2f_texCoord.y = dir.z;
    v2f_texCoord.z = dir.x;

    v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

    gl_Position = modelViewProjectionMatrix * in_position;
}