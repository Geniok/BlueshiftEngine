in vec4 in_position : POSITION;
in vec4 in_color : COLOR;
in vec3 in_normal : NORMAL;
in vec2 in_st : TEXCOORD0;
in vec4 in_tangent : TEXCOORD1;

#ifdef USE_SHADOW_MAP
$include "shadow.vp"
#endif

out vec4 v2f_color;
out vec2 v2f_tcDiffuseNormal;
out vec2 v2f_tcSpecular;
//out vec2 v2f_tcLightmap;
out vec3 v2f_viewVector;
out vec3 v2f_lightVector;
out vec3 v2f_lightFallOff;
out vec4 v2f_lightProjection;
out vec3 v2f_normal;
out vec3 v2f_toWorldS;
out vec3 v2f_toWorldT;
out vec3 v2f_toWorldR;

#ifdef INSTANCED_DRAW
	struct entityData_t {
		vec4 worldMatrixS;
		vec4 worldMatrixT;
		vec4 worldMatrixR;
		vec3 localViewOrigin;
		vec3 localLightDir;
		vec4 textureMatrixS;
		vec4 textureMatrixT;
		vec4 vertexColorScale;
		vec4 vertexColorAdd;
		vec4 constantColor;
	};

	uniform entityData_t entityData[256];
	#define ED entityData[gl_InstanceIDARB]
#else
	uniform vec4 worldMatrixS;
	uniform vec4 worldMatrixT;
	uniform vec4 worldMatrixR;
	uniform vec3 localViewOrigin;
	uniform mat3 localLightAxis;
	uniform vec4 localLightOrigin;
	uniform vec4 textureMatrixS;
	uniform vec4 textureMatrixT;
	uniform vec4 vertexColorScale;
	uniform vec4 vertexColorAdd;
	uniform vec4 constantColor;
#endif

uniform mat4 modelViewProjectionMatrix;
uniform vec3 lightInvRadius;
uniform mat4 lightTextureMatrix;
uniform bool useShadowMap;

void main() {
#if _NORMAL_SOURCE == 0
    vec4 localVertex;
	vec3 localNormal;

	#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
		vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
	#else
		vec3 vNormal = in_normal.xyz;
	#endif
	
	#ifdef GPU_SKINNING
		skinningMatrix(in_position, localVertex, vNormal, localNormal);
	#else
		localVertex = in_position;
		localNormal = vNormal;
	#endif
#else
	vec4 localVertex;
	vec3 localNormal;
	vec3 localTangent;
	vec3 localBiTangent;

	#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
		vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
        vec4 vTangent = in_tangent * 2.0 - 1.0;
	#else
		vec3 vNormal = in_normal.xyz;
        vec4 vTangent = in_tangent;
	#endif

	#ifdef GPU_SKINNING
		skinningMatrix(in_position, localVertex, vNormal, localNormal, vTangent, localTangent, localBiTangent);
	#else
		localVertex = in_position;
		localNormal = vNormal;
		localTangent = vTangent.xyz;
		localBiTangent = normalize(cross(vNormal, vTangent.xyz) * vTangent.w);
	#endif
#endif

#if DIRECT_LIGHTING
    vec4 worldVertex;
	worldVertex.x = dot(worldMatrixS, localVertex);
	worldVertex.y = dot(worldMatrixT, localVertex);
	worldVertex.z = dot(worldMatrixR, localVertex);
	worldVertex.w = 1.0;

    #ifdef USE_SHADOW_MAP
	    #ifdef USE_SHADOW_POINT
		    ShadowCubeTransform(localVertex, localLightOrigin.xyz, worldMatrixS.xyz, worldMatrixT.xyz, worldMatrixR.xyz);
	    #elif defined(USE_SHADOW_SPOT) || defined(USE_SHADOW_CASCADE)
		    ShadowTransform(worldVertex);
	    #endif
    #endif
	
    v2f_lightProjection = lightTextureMatrix * worldVertex;

	vec3 L = localLightOrigin.xyz + (localLightOrigin.w - 1.0) * localVertex.xyz;

	v2f_lightFallOff = (L * localLightAxis) * lightInvRadius;
#endif

#if _NORMAL_SOURCE == 0
	v2f_normal = localNormal;

    #if DIRECT_LIGHTING || AMBIENT_LIGHTING || _PARALLAX
	    v2f_viewVector = localViewOrigin.xyz - localVertex.xyz;
    #endif

    #if DIRECT_LIGHTING
        v2f_lightVector = L;
    #endif
	
	#if AMBIENT_LIGHTING
		v2f_toWorldS.xyz = worldMatrixS.xyz;
		v2f_toWorldT.xyz = worldMatrixT.xyz;
		v2f_toWorldR.xyz = worldMatrixR.xyz;
	#endif
#else
	mat3 TBN = mat3(localTangent, localBiTangent, localNormal);

    #if DIRECT_LIGHTING || AMBIENT_LIGHTING || _PARALLAX
	    v2f_viewVector = (localViewOrigin.xyz - localVertex.xyz) * TBN;
    #endif

    #if DIRECT_LIGHTING
        v2f_lightVector = L * TBN;
    #endif
	
	#if AMBIENT_LIGHTING
		v2f_toWorldS.xyz = worldMatrixS.xyz * TBN;
		v2f_toWorldT.xyz = worldMatrixT.xyz * TBN;
		v2f_toWorldR.xyz = worldMatrixR.xyz * TBN;
		//v2f_toWorldT.w = in_tangent.w;
	#endif
#endif

	v2f_tcDiffuseNormal.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_tcDiffuseNormal.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));

#if (_SPECULAR_SOURCE == 2 || _SPECULAR_SOURCE == 3 || _SPECULAR_SOURCE == 4)
	v2f_tcSpecular = in_st.xy;
#endif

#ifdef LIGHTMAP
	v2f_tcLightmap = in_st2.xy;
#endif

	v2f_color = (in_color * vertexColorScale + vertexColorAdd) * constantColor;

	gl_Position = modelViewProjectionMatrix * localVertex;
}
